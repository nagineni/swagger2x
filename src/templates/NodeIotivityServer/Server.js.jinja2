//    copyright 2016 Open Interconnect Consortium, Inc. All rights reserved.
//
//    Redistribution and use in source and binary forms, with or without modification,
//    are permitted provided that the following conditions are met:
//    1.  Redistributions of source code must retain the above copyright notice,
//        this list of conditions and the following disclaimer.
//    2.  Redistributions in binary form must reproduce the above copyright notice,
//        this list of conditions and the following disclaimer in the documentation and/or other materials provided
//        with the distribution.
//         
//    THIS SOFTWARE IS PROVIDED BY THE OPEN INTERCONNECT CONSORTIUM, INC. "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
//    INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE OR
//    WARRANTIES OF NON-INFRINGEMENT, ARE DISCLAIMED. IN NO EVENT SHALL THE OPEN INTERCONNECT CONSORTIUM, INC. OR
//    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
//    OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
//    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//    EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Generated code from swagger2x
// generates an IOTivity node server based on
// https://github.com/otcshare/iotivity-node
// documentation available at:
// https://github.com/01org/iot-js-api/tree/master/api/ocf

var intervalId;
var iotivity = require( "iotivity-node/lowlevel" );

// resource_handles for each end point  
{% for path, path_data in json_data['paths'].items() -%}
// path {{ path }}
var {{path|variablesyntax}}_handle = {};
var {{path|variablesyntax}}_rt =  {{retrieve_path_value(path_data, "get/200/x-example", "rt")}};
{% for methodName, method_data in path_data.items() -%}
{% if methodName == "get" -%}
{% for property_name, property_data in method_data.items() -%}
{% if property_name == "parameters" -%}
{% for parameter_data in property_data -%}
{% if parameter_data["$ref"] -%}
var {{path|variablesyntax}}_if =  {{query_ref(json_data, parameter_data["$ref"], "enum")}};
{% endif -%}{% endfor -%}{% endif -%}{% endfor -%}{% endif -%}{% endfor -%}
{% endfor -%}

// list all variables as globals
{% for definition, def_data in json_data['definitions'].items() -%}
{% for decl, decl_data in def_data.items() -%}
{% if decl == "properties" -%} 
{% for var, var_data in decl_data.items() -%}
var {{var|variablesyntax}}; // readonly: {{var_data.readOnly}} type: {{var_data.type}} description: {{var_data.description}}
{% endfor -%}
{% endif -%}
{% endfor -%}
{% endfor -%}

console.log( "Starting OCF stack in server mode" );

// Start iotivity and set up the processing loop
iotivity.OCInit( null, 0, iotivity.OCMode.OC_SERVER );

// set the device data
iotivity.OCSetPropertyValue( iotivity.OCPayloadType.PAYLOAD_TYPE_DEVICE,
	iotivity.OC_RSRVD_SPEC_VERSION, "res.1.1.0" );
iotivity.OCSetPropertyValue( iotivity.OCPayloadType.PAYLOAD_TYPE_DEVICE,
	iotivity.OC_RSRVD_DATA_MODEL_VERSION, "abc.0.0.1" );
iotivity.OCSetPropertyValue( iotivity.OCPayloadType.PAYLOAD_TYPE_DEVICE,
	iotivity.OC_RSRVD_DEVICE_NAME, "{{json_data['info']['title']}}" );

// set the platform data
iotivity.OCSetPropertyValue( iotivity.OCPayloadType.PAYLOAD_TYPE_PLATFORM,
	iotivity.OC_RSRVD_PLATFORM_ID, "{{uuid}}" );
iotivity.OCSetPropertyValue( iotivity.OCPayloadType.PAYLOAD_TYPE_PLATFORM,
	iotivity.OC_RSRVD_MFG_NAME, "{{manufactorer}}" );

// helper functions
intervalId = setInterval( function() {
	iotivity.OCProcess();
}, 1000 );


function bindStringsToResource( handle, strings, binder ) {
	var index, result;
	
	for ( index = 0; index < strings.length; index++ ) {
		result = iotivity[ binder ]( handle, strings[ index ] );
		if ( result !== iotivity.OCStackResult.OC_STACK_OK ) {
			console.log( "Failed to perform: " + binder );
			result = csdk.OCDeleteResource( handle );
			if ( result !== iotivity.OCStackResult.OC_STACK_OK ) {
			 	console.log( "OCDeleteResource failed: " + result );
			}
			return false;
		}
	}

	return true;
};

console.log( "Registering resources" );
{% for path, path_data in json_data['paths'].items() -%}
// Create a new resource for {{path}}
iotivity.OCCreateResource(
	// The bindings fill in this object
	{{path|variablesyntax}}_handle,
	{{path|variablesyntax}}_rt[0],
	{{path|variablesyntax}}_if[0],
	"{{path}}",
	function( flag, request ) {
		console.log( "Entity handler called with flag = " + flag + " and the following request:" );
		console.log( JSON.stringify( request, null, 4 ) );
       
        {% for methodName, method_data in path_data.items() -%} 
        {% if methodName == "get" -%} 
        // GET method
		if ( request && request.method === iotivity.OCMethod.OC_REST_GET ) {
        
            // list the query params for {{methodName}}
            {% for property_name, property_data in method_data.items() -%}
            {% if property_name == "parameters" -%}
            {% for parameter_data in property_data -%}
            {% if parameter_data["$ref"] -%} 
            var {{query_ref(json_data, parameter_data["$ref"], "name") |variablesyntax}} = ""; // {{query_ref(json_data, parameter_data["$ref"], "type")}} {{query_ref(json_data, parameter_data["$ref"], "description")}}
            if (request["{{query_ref(json_data, parameter_data["$ref"], "name")}}"] != undefined ) {
               // possible values: {{query_ref(json_data, parameter_data["$ref"], "enum")}}.
               {{query_ref(json_data, parameter_data["$ref"], "name") |variablesyntax}} = request["{{query_ref(json_data, parameter_data["$ref"], "name")}}"];
            }
            {% endif -%}
            {% if parameter_data["in"] in ["query"] -%} 
            var {{parameter_data["name"] |variablesyntax}} = "" ;  // {{parameter_data["type"]}} {{parameter_data["description"]}}
            if (request["{{parameter_data["name"]}}"] != undefined ) {
                // possible values: {{parameter_data["enum"]}}
               {{parameter_data["name"] |variablesyntax}} = request["{{parameter_data["name"]}}"] ;
            }
            {% endif -%}
            {% endfor -%} 
            {% endif -%}
            {% endfor -%} 
        
			iotivity.OCDoResponse( {
				requestHandle: request.requestHandle,
				resourceHandle: request.resource,
				ehResult: iotivity.OCEntityHandlerResult.OC_EH_OK,
				payload: {
					type: iotivity.OCPayloadType.PAYLOAD_TYPE_REPRESENTATION,
					values: {
                        {% for var, var_dict in retrieve_path_dict(path_data, "get/200/x-example").items() -%}
                        {% if loop.last -%}
                        "{{var}}" : {{var|variablesyntax}}
                        {% else -%}
                        "{{var}}" : {{var|variablesyntax}},
                        {% endif -%}
                        {% endfor -%}
					}
				},
				resourceUri: "{{path}}",
				sendVendorSpecificHeaderOptions: []
			} );
            return iotivity.OCEntityHandlerResult.OC_EH_OK; 
        }            
        {% endif -%}
        {% if methodName == "post" -%} 
        // POST method
		if ( request && request.method === iotivity.OCMethod.OC_REST_POST ) {
            
            // list the query params for {{methodName}}
            {% for property_name, property_data in method_data.items() -%}
            {% if property_name == "parameters" -%}
            {% for parameter_data in property_data -%}
            {% if parameter_data["$ref"] -%} 
            var {{query_ref(json_data, parameter_data["$ref"], "name") |variablesyntax}} = "" ; // {{query_ref(json_data, parameter_data["$ref"], "type")}} {{query_ref(json_data, parameter_data["$ref"], "description")}}
            if (request["{{query_ref(json_data, parameter_data["$ref"], "name")}}"] != undefined ) {
                // possible values: {{query_ref(json_data, parameter_data["$ref"], "enum")}}.
                {{query_ref(json_data, parameter_data["$ref"], "name") |variablesyntax}} = request["{{query_ref(json_data, parameter_data["$ref"], "name")}}"] ;
            }
            {% endif -%}
            {% if parameter_data["in"] in ["query"] -%} 
            var {{parameter_data["name"] |variablesyntax}} = "" ; // {{parameter_data["type"]}} {{parameter_data["description"]}}
            if (request["{{parameter_data["name"]}}"] != undefined ) {
                // possible values: {{parameter_data["enum"]}}
                {{parameter_data["name"] |variablesyntax}} = request["{{parameter_data["name"]}}"] ;
            }
            {% endif -%}
            {% endfor -%} 
            {% endif -%}
            {% endfor -%} 
            
            if ( request && request.payload)
            {
              // update the global variables
              {% for var, var_dict in retrieve_path_dict(path_data, "post/200/x-example").items() -%}
              {{var|variablesyntax}} = request.payload.{{var}};
              {% endfor -%}
            }
            // do something with the new values like printing them..
            {% for var, var_dict in retrieve_path_dict(path_data, "post/200/x-example").items() -%}
            console.log( "new value ({{var}}) : " + {{var  | variablesyntax}} );
            {% endfor -%}
			iotivity.OCDoResponse( {
				requestHandle: request.requestHandle,
				resourceHandle: request.resource,
				ehResult: iotivity.OCEntityHandlerResult.OC_EH_OK,
				payload: {
					type: iotivity.OCPayloadType.PAYLOAD_TYPE_REPRESENTATION,
					values: {
						{% for var, var_dict in retrieve_path_dict(path_data, "post/200/x-example").items() -%}
                        {% if loop.last -%}
                        "{{var}}" : {{var|variablesyntax}}
                        {% else -%}
                        "{{var}}" : {{var|variablesyntax}},
                        {% endif -%}
                        {% endfor -%}
					}
				},
				resourceUri: "{{path}}",
				sendVendorSpecificHeaderOptions: []
			} );
            return iotivity.OCEntityHandlerResult.OC_EH_OK;
        }
        {% endif -%}
        {% endfor -%}
        

		// By default we error out
		return iotivity.OCEntityHandlerResult.OC_EH_ERROR;
	},
    // always discoverable
	iotivity.OCResourceProperty.OC_DISCOVERABLE );
      
bindStringsToResource( {{path|variablesyntax}}_handle.hanlde,  {{path|variablesyntax}}_rt.slice( 1 ),
	"OCBindResourceTypeToResource");
 
bindStringsToResource( {{path|variablesyntax}}_handle.handle,  {{path|variablesyntax}}_if.slice( 1 ),
	"OCBindResourceInterfaceToResource" );

{% endfor -%}

console.log( "Server ready" );

// Exit gracefully when interrupted
process.on( "SIGINT", function() {
    console.log( "SIGINT: Quitting..." );

    // Tear down the processing loop and stop iotivity
    clearInterval( intervalId );
    // deleting all handles
    {% for path, path_data in json_data['paths'].items() -%}
    iotivity.OCDeleteResource( {{path|variablesyntax}}_handle.handle );
    {% endfor -%}
    // stop the stack
    iotivity.OCStop();
    // Exit
    process.exit( 0 );
} );
